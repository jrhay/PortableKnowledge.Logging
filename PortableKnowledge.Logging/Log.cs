using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

// PortableKnowledge Logging Framework for .NET
// (C) Portable Knowledge, LLC
//
// Released to the public under the Portable Knowledge Open Source Component License
//
// Permission is hereby granted, free of charge, to any person or organization obtaining a 
// copy of the software and accompanying documentation covered by this license (the "Software")
// to use, reproduce, display, distribute, execute, and transmit the Software, and to prepare 
// derivative works of the Software, and to permit third-parties to whom the Software is 
// furnished to do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including the above license
// grant, this restriction and the following disclaimer, must be included in all copies of the 
// Software, in whole or in part, and all derivative works of the Software, unless such copies 
// or derivative works are solely in the form of machine-executable object code generated by 
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
// PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE 
// DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
// OTHER DEALINGS IN THE SOFTWARE.  IN NO CASE DOES THE USE OF THIS SOFTWARE EXPRES OR IMPLY 
// ANY PARTNERSHIP OR COOPERATION WITH THE AUTHORS OR COPYRIGHT HOLDERS OF THIS SOFTWARE.

namespace PortableKnowledge.Logging
{
    /// <summary>
    /// Maintains a list of log listeners, and sends logging events to appropriate
    /// registered listeners.
    /// </summary>
    public class Log 
    {
        #region Log Initialization and Configuration

        /// <summary>
        /// Dummy object to provide a log-wide locking point
        /// </summary>
        object LogLock = new Object();

        /// <summary>
        /// Initialize a new Log instance.
        /// </summary>
        public Log()
        {
        }

        #endregion

        #region Log Event Handling

        private LogEventHandler LogMessageHandler;
        /// <summary>
        /// Event raised whenever a new LogItem has been added to the current log
        /// </summary>
        public event LogEventHandler OnLogMessageReceived
        {
            add
            {
                lock (this.LogLock)
                {
                    LogMessageHandler += value;
                }
            }
            remove
            {
                lock (this.LogLock)
                {
                    LogMessageHandler -= value;
                }
            }
        }

        #endregion

        #region Log Message Handling

        /// <summary>
        /// Send a general logging item to all registered log listeners
        /// </summary>
        /// <param name="item">Logging item to send</param>
        public void Add(LogItem item)
        {
            if (LogMessageHandler != null)
                LogMessageHandler.Invoke(this, new LogEventArgs(item));
        }

        /// <summary>
        /// Send a Debug message to all registered log listeners
        /// </summary>
        /// <param name="sender">The object sending the debug message (usually "this")</param>
        /// <param name="message">The text of the message</param>
        public void Debug(Object sender, String message)
        {
            this.Add(new LogItem(sender, LogLevel.Debug, message));
        }

        /// <summary>
        /// Send a Debug message to all registered log listeners
        /// </summary>
        /// <param name="message">The text of the message</param>
        public void Debug(String message)
        {
            this.Debug(null, message);
        }

        /// <summary>
        /// Send an Informational message to all registered log listeners
        /// </summary>
        /// <param name="sender">The object sending the debug message (usually "this")</param>
        /// <param name="message">The text of the message</param>
        public void Info(Object sender, String message)
        {
            this.Add(new LogItem(sender, LogLevel.Info, message));
        }

        /// <summary>
        /// Send an Informational message to all registered log listeners
        /// </summary>
        /// <param name="message">The text of the message</param>
        public void Info(String message)
        {
            this.Info(null, message);
        }

        /// <summary>
        /// Send a Warning message to all registered log listeners
        /// </summary>
        /// <param name="sender">The object sending the debug message (usually "this")</param>
        /// <param name="message">The text of the message</param>
        public void Warning(Object sender, String message)
        {
            this.Add(new LogItem(sender, LogLevel.Warning, message));
        }

        /// <summary>
        /// Send a Warning message to all registered log listeners
        /// </summary>
        /// <param name="message">The text of the message</param>
        public void Warning(String message)
        {
            this.Warning(null, message);
        }

        /// <summary>
        /// Send a Recoverable Error message to all registered log listeners
        /// </summary>
        /// <param name="sender">The object sending the debug message (usually "this")</param>
        /// <param name="message">The text of the message</param>
        public void Error(Object sender, String message)
        {
            this.Add(new LogItem(sender, LogLevel.Error, message));
        }

        /// <summary>
        /// Send a Recoverable Error message to all registered log listeners
        /// </summary>
        /// <param name="message">The text of the message</param>
        public void Error(String message)
        {
            this.Error(null, message);
        }

        /// <summary>
        /// Send a Fatal Error message to all registered log listeners
        /// </summary>
        /// <param name="sender">The object sending the debug message (usually "this")</param>
        /// <param name="message">The text of the message</param>
        public void FatalError(Object sender, String message)
        {
            this.Add(new LogItem(sender, LogLevel.FatalError, message));
        }

        /// <summary>
        /// Send a Fatal Error message to all registered log listeners
        /// </summary>
        /// <param name="message">The text of the message</param>
        public void FatalError(String message)
        {
            this.FatalError(null, message);
        }

        #endregion
    }
}
