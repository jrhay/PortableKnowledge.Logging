using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;

// PortableKnowledge Logging Framework for .NET
// (C) Portable Knowledge, LLC
//
// Released to the public under the Portable Knowledge Open Source Component License
//
// Permission is hereby granted, free of charge, to any person or organization obtaining a 
// copy of the software and accompanying documentation covered by this license (the "Software")
// to use, reproduce, display, distribute, execute, and transmit the Software, and to prepare 
// derivative works of the Software, and to permit third-parties to whom the Software is 
// furnished to do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including the above license
// grant, this restriction and the following disclaimer, must be included in all copies of the 
// Software, in whole or in part, and all derivative works of the Software, unless such copies 
// or derivative works are solely in the form of machine-executable object code generated by 
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
// PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE 
// DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
// OTHER DEALINGS IN THE SOFTWARE.  IN NO CASE DOES THE USE OF THIS SOFTWARE EXPRES OR IMPLY 
// ANY PARTNERSHIP OR COOPERATION WITH THE AUTHORS OR COPYRIGHT HOLDERS OF THIS SOFTWARE.

namespace PortableKnowledge.Logging
{
    /// <summary>
    /// LogListener which sends logging messages to a specific ListBox.  The ListBox updates are
    /// guarenteed to be executed on the main application thread.
    /// </summary>
    public class ListBoxLogListener : LogListener
    {
        /// <summary>
        /// The ListBox that should display log messages
        /// </summary>
        protected ListBox _listBox;

        /// <summary>
        /// The maximum number of lines to allow in the ListBox log
        /// </summary>
        public UInt32 MaxLogLines = 100;

        /// <summary>
        /// Initialize a new ListBoxLogListener instance to display all Log Events from a specific 
        /// Log to a specific ListBox
        /// </summary>
        /// <param name="log">Log instance to register this listener with</param>
        /// <param name="listBox">ListBox instance to display the log in</param>
        public ListBoxLogListener(Log log, ListBox listBox) : base(log)
        {
            this._listBox = listBox;
        }

        delegate void AddMessageToListBoxDelegate(String Message);
        private void AddMessageToListBox(String Message)
        {
            if (this._listBox.InvokeRequired)
            {
               AddMessageToListBoxDelegate update = new AddMessageToListBoxDelegate(AddMessageToListBox);
               this._listBox.Invoke(update, Message);
            }
            else
            {
                this._listBox.Items.Add(Message);

                // Remove the top lines from the list box to keep the number of log messages manageable
                while (this._listBox.Items.Count > this.MaxLogLines)
                    this._listBox.Items.RemoveAt(0);

                // Scroll the list box to display the last-added line
                this._listBox.SelectedIndex = this._listBox.Items.Count - 1;
                this._listBox.ClearSelected();
            }
        }

        /// <summary>
        /// Called whenever a new item is added to the registered log.  Adds the LogItem
        /// to the assocaited ListBox control.
        /// </summary>
        /// <param name="item">Details of newly-added log item</param>
        public override void ProcessLogMessage(LogItem item)
        {
            this.AddMessageToListBox(item.ToString(" "));
        }
    }
}
