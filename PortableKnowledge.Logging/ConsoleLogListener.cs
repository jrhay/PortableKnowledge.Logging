using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

// PortableKnowledge Logging Framework for .NET
// (C) Portable Knowledge, LLC
//
// Released to the public under the Portable Knowledge Open Source Component License
//
// Permission is hereby granted, free of charge, to any person or organization obtaining a 
// copy of the software and accompanying documentation covered by this license (the "Software")
// to use, reproduce, display, distribute, execute, and transmit the Software, and to prepare 
// derivative works of the Software, and to permit third-parties to whom the Software is 
// furnished to do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including the above license
// grant, this restriction and the following disclaimer, must be included in all copies of the 
// Software, in whole or in part, and all derivative works of the Software, unless such copies 
// or derivative works are solely in the form of machine-executable object code generated by 
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
// PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE 
// DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
// OTHER DEALINGS IN THE SOFTWARE.  IN NO CASE DOES THE USE OF THIS SOFTWARE EXPRES OR IMPLY 
// ANY PARTNERSHIP OR COOPERATION WITH THE AUTHORS OR COPYRIGHT HOLDERS OF THIS SOFTWARE.

namespace PortableKnowledge.Logging
{
    /// <summary>
    /// LogListener which writes log message updates to the console.
    /// The console updates are guarenteed to be thread safe.
    /// Any errors writing to the console are silently ignored.
    /// </summary>
    public class ConsoleLogListener : LogListener
    {
        /// <summary>
        /// Initialize a new ConsoleLogListener instance to write all Log Events from a spcified
        /// Log to the console
        /// </summary>
        /// <param name="log">Log instance to register this listener with</param>
        public ConsoleLogListener(Log log)
            : base(log)
        {
        }

        /// <summary>
        /// Called whenever a new item is added to the registered log.  Writes the log message
        /// to the system console.
        /// </summary>
        /// <param name="item">Details of newly-added log item</param>
        public override void ProcessLogMessage(LogItem item)
        {
            Console.WriteLine(item.ToString());
        }

    }
}
