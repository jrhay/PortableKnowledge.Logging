using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

// PortableKnowledge Logging Framework for .NET
// (C) Portable Knowledge, LLC
//
// Released to the public under the Portable Knowledge Open Source Component License
//
// Permission is hereby granted, free of charge, to any person or organization obtaining a 
// copy of the software and accompanying documentation covered by this license (the "Software")
// to use, reproduce, display, distribute, execute, and transmit the Software, and to prepare 
// derivative works of the Software, and to permit third-parties to whom the Software is 
// furnished to do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including the above license
// grant, this restriction and the following disclaimer, must be included in all copies of the 
// Software, in whole or in part, and all derivative works of the Software, unless such copies 
// or derivative works are solely in the form of machine-executable object code generated by 
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
// PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE 
// DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
// OTHER DEALINGS IN THE SOFTWARE.  IN NO CASE DOES THE USE OF THIS SOFTWARE EXPRES OR IMPLY 
// ANY PARTNERSHIP OR COOPERATION WITH THE AUTHORS OR COPYRIGHT HOLDERS OF THIS SOFTWARE.

namespace PortableKnowledge.Logging
{
    /// <summary>
    /// Possible Log Levels; multiple levels may be assigned at once
    /// </summary>
    [Flags]
    public enum LogLevel : int
    {
        /// <summary>
        /// No Level. Log listeners will receive all log events; log events will go to all listeners.
        /// </summary>
        None = 0,
        /// <summary>
        /// Only to be shown for very verbose logging needs
        /// </summary>
        Debug = 0x01,
        /// <summary>
        /// Informative.  Status/State messages in the normal flow of operation
        /// </summary>
        Info = 0x02,
        /// <summary>
        /// Something slightly out-of-normal happened, but can be ignored in most cases
        /// </summary>
        Warning = 0x04,
        /// <summary>
        /// A recoverable error has occured
        /// </summary>
        Error = 0x08,
        /// <summary>
        /// A fatal, non-recoverable error has occured
        /// </summary>
        FatalError = 0x10,

    }

    /// <summary>
    /// Generic, Immutable Log Item.  Instances of this class contain the complete information for one item in a log.
    /// </summary>
    public class LogItem
    {
        /// <summary>
        /// Object which created this log event
        /// </summary>
        public Object Sender { get { return _Sender; } }
        private Object _Sender;

        /// <summary>
        /// Timestamp of the event
        /// </summary>
        public DateTime Timestamp { get { return _Timestamp; } }
        private DateTime _Timestamp;

        /// <summary>
        /// Event Logging Level
        /// </summary>
        public LogLevel Level { get { return _Level; } }
        private LogLevel _Level;

        /// <summary>
        /// Application-defined code number for this event, or 0 if no code was given
        /// </summary>
        public UInt32 Code { get { return _Code; } }
        private UInt32 _Code;

        /// <summary>
        /// Event Message
        /// </summary>
        public String Message { get { return _Message; } }
        private String _Message;

        /// <summary>
        /// Create a new LogItem instance
        /// </summary>
        /// <param name="sender">The object generating this log message</param>
        /// <param name="level">The LogLevel for this message</param>
        /// <param name="code">The application-defined code number for this message (0 if no code)</param>
        /// <param name="message">The actual text of the message</param>
        public LogItem(Object sender, LogLevel level, UInt32 code, String message)
        {
            this._Timestamp = DateTime.Now;
            this._Sender = sender;
            this._Level = level;
            this._Code = code;
            this._Message = message;
        }

        /// <summary>
        /// Create a new LogItem instance
        /// </summary>
        /// <param name="sender">The object generating this log message</param>
        /// <param name="level">The LogLevel for this message</param>
        /// <param name="message">The actual text of the message</param>
        public LogItem(Object sender, LogLevel level, String message)
        {
            this._Timestamp = DateTime.Now;
            this._Sender = sender;
            this._Level = level;
            this._Code = 0;
            this._Message = message;
        }

        #region LogItem Output

        /// <summary>
        /// Return the string representation of the LogItem, with the components seperatated
        /// by the given delimiter string.
        /// </summary>
        /// <param name="delim">Delimiter to use between LogItem parts</param>
        /// <returns>String containing formatted LogItem details, deliminated by delim</returns>
        public string ToString(String delim)
        {
            StringBuilder OutString = new StringBuilder(5);

            OutString.Append(_Timestamp.ToString("yyyy-MM-dd HH:mm:ss.fff"));
            OutString.Append(delim + _Level.ToString().ToUpper());
            OutString.Append(delim + _Message);

            if (Sender != null) 
                OutString.Append(delim + "[" + Sender.ToString() + "]");

            if (_Code != 0)
                OutString.Append(delim + _Code.ToString());

            return  OutString.ToString();
        }

        /// <summary>
        /// Return the string representation of the LogItem, with the components seperatated
        /// a single space character
        /// </summary>
        /// <returns>String containing formatted, space-delimited LogItem details</returns>
        public override string ToString()
        {
            return ToString(" ");
        }

        #endregion
    }
}
