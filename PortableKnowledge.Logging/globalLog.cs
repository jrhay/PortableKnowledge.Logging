using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

// PortableKnowledge Logging Framework for .NET
// (C) Portable Knowledge, LLC
//
// Released to the public under the Portable Knowledge Open Source Component License
//
// Permission is hereby granted, free of charge, to any person or organization obtaining a 
// copy of the software and accompanying documentation covered by this license (the "Software")
// to use, reproduce, display, distribute, execute, and transmit the Software, and to prepare 
// derivative works of the Software, and to permit third-parties to whom the Software is 
// furnished to do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including the above license
// grant, this restriction and the following disclaimer, must be included in all copies of the 
// Software, in whole or in part, and all derivative works of the Software, unless such copies 
// or derivative works are solely in the form of machine-executable object code generated by 
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
// PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE 
// DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
// OTHER DEALINGS IN THE SOFTWARE.  IN NO CASE DOES THE USE OF THIS SOFTWARE EXPRES OR IMPLY 
// ANY PARTNERSHIP OR COOPERATION WITH THE AUTHORS OR COPYRIGHT HOLDERS OF THIS SOFTWARE.

namespace PortableKnowledge.Logging
{
    /// <summary>
    /// Implements a singleton Log class to provide a global, application-wide log
    /// system.  The global log is lazilly initialized, so does not have performance
    /// impact if it is not called (i.e., can be called only in production code)
    /// This class is thread-safe.
    /// </summary>
    public sealed class GlobalLog : Log
    {
        // Lazy-loaded, thread-safe singleton access is based on code originally developed
        // by Jon Skeet: http://csharpindepth.com/Articles/General/Singleton.aspx

        /// <summary>
        /// Private constructor to force this class to the Singleton pattern
        /// </summary>
        private GlobalLog()
        {
        }

        /// <summary>
        /// Is the GlobalLog enabled?  This is initially FALSE, in which case Instance
        /// will return NULL and no LogListeners will register with GlobalLog.  Setting this
        /// to TRUE will cause a global log instance to be created with the next reference
        /// to Instance.
        /// </summary>
        public static Boolean loggingEnabled = false;

        private static NullLog _NullLog = new NullLog();

        /// <summary>
        /// Lazy-loaded Instance property. 
        /// </summary>
        public static Log Instance { 
            get {
                if (loggingEnabled)
                    return GlobalLogInternal.instance;
                else
                    return _NullLog;
            } 
        }

        private class GlobalLogInternal
        {
            /// <summary>
            /// Static constructors are guarenteed to execute only upon the first 
            /// reference to the class in a given AppDomain.  So, when the static property
            /// above first references us, on the first thread in the application, we'll
            /// be created.  This ensures thread safty.
            /// </summary>
            static GlobalLogInternal()
            {
            }

            /// <summary>
            /// This property will be created upon the first (and only) static creation
            /// of this class.  It needs to be internal, so that we can reference it from
            /// the GlobalLog class (parent classes don't automatically have full access
            /// to members of nested classes)
            /// </summary>
            internal static readonly GlobalLog instance = new GlobalLog();
        }
    }
}
