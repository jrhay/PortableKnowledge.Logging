using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Threading;

// PortableKnowledge Logging Framework for .NET
// (C) Portable Knowledge, LLC
//
// Released to the public under the Portable Knowledge Open Source Component License
//
// Permission is hereby granted, free of charge, to any person or organization obtaining a 
// copy of the software and accompanying documentation covered by this license (the "Software")
// to use, reproduce, display, distribute, execute, and transmit the Software, and to prepare 
// derivative works of the Software, and to permit third-parties to whom the Software is 
// furnished to do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including the above license
// grant, this restriction and the following disclaimer, must be included in all copies of the 
// Software, in whole or in part, and all derivative works of the Software, unless such copies 
// or derivative works are solely in the form of machine-executable object code generated by 
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
// PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE 
// DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR 
// OTHER DEALINGS IN THE SOFTWARE.  IN NO CASE DOES THE USE OF THIS SOFTWARE EXPRES OR IMPLY 
// ANY PARTNERSHIP OR COOPERATION WITH THE AUTHORS OR COPYRIGHT HOLDERS OF THIS SOFTWARE.

namespace PortableKnowledge.Logging
{
    /// <summary>
    /// LogListener which updates a given Label control with log message updates.
    /// The Label updates are guarenteed to be thread safe.
    /// Any errors updating the label are silently ignored.
    /// </summary>
    public class LabelLogListener : LogListener
    {
        /// <summary>
        /// The full path to the file to write the log to
        /// </summary>
        public Label label { get { return _label; } }

        /// <summary>
        /// The full path to the file to write the log to
        /// </summary>
        protected Label _label;

        /// <summary>
        /// Initialize a new LabelLogListener instance to write all Log Events from a spcified
        /// Log to a specific Label control
        /// </summary>
        /// <param name="log">Log instance to register this listener with</param>
        /// <param name="logLabel">Label control to update with log messages</param>
        public LabelLogListener(Log log, Label logLabel) : base(log)
        {
            this._label = logLabel;
        }

        /// <summary>
        /// Called whenever a new item is added to the registered log.  Changes the text of
        /// the associated label to the item's Message value.  Ensures that the label update
        /// only occurs on the GUI thread via the InvokeRequired pattern.
        /// </summary>
        /// <param name="item">Details of newly-added log item</param>
        public override void ProcessLogMessage(LogItem item)
        {
            if (_label.InvokeRequired)
            {
                _label.Invoke(new MethodInvoker(() => { ProcessLogMessage(item); }));
            }
            else
            {
                _label.Text = item.Message;
                _label.Update();
            }
        }

    }
}
